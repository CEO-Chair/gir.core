namespace Generator3.Generation.Callback
{
    public class PublicNotifiedHandlerTemplate : Template<PublicNotifiedHandlerModel>
    {
        public string Render(PublicNotifiedHandlerModel model)
        {
            return $@"
using System;
using System.Linq;
using System.Runtime.InteropServices;

#nullable enable

namespace { model.NamespaceName }
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    /// <summary>
    /// Notified Handler for {model.DelegateType}. A notified annotation indicates the closure should
    /// be kept alive until it is manually removed by the user. This removal is indicated by a
    /// destroy_notify event, emitted by the relevant library. Pass <c>DestroyNotify</c> in place of a
    /// destroy_notify callback parameter. 
    /// </summary>
    public class {model.Name} : IDisposable
    {{
        public event EventHandler<EventArgs>? OnDestroyNotify;
        public {model.InternalDelegateType} NativeCallback;
        public GLib.Internal.DestroyNotify DestroyNotify;

        private {model.DelegateType} managedCallback;
        private GCHandle gch;

        public {model.Name}({model.DelegateType} managed)
        {{
            DestroyNotify = DestroyCallback;
            managedCallback = managed;
            gch = GCHandle.Alloc(this);

            {CommonHandlerRenderUtils.RenderNativeCallback(model)}
        }}

        private void DestroyCallback(IntPtr userData)
        {{
            OnDestroyNotify?.Invoke(this, EventArgs.Empty);

            // Allow for garbage collection
            gch.Free();
        }}
        
        public void Dispose()
        {{
            if (gch.IsAllocated)
                gch.Free();
        }}
    }}
}}";
        }
    }
}
