namespace Generator3.Generation.Callback
{
    public class PublicAsyncHandlerTemplate : Template<PublicAsyncHandlerModel>
    {
        public string Render(PublicAsyncHandlerModel model)
        {
            return $@"
using System;
using System.Runtime.InteropServices;

#nullable enable

namespace { model.NamespaceName }
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    /// <summary>
    /// Async Handler for {model.DelegateType}. An async annotation indicates the closure will
    /// be called precisely once, after which it is then available for garbage collection.
    /// </summary>
    public class {model.Name} : IDisposable
    {{
        private {model.DelegateType} managedCallback;
        private GCHandle gch;

        public {model.NativeDelegateType} NativeCallback;
    
        public {model.Name}({model.DelegateType} managed)
        {{
            managedCallback = managed;
            gch = GCHandle.Alloc(this);
            //TODO NativeCallback = ??
        }}
        
        public void Dispose()
        {{
            if (gch.IsAllocated)
                gch.Free();
        }}
    }}
}}";
        }
    }
}
