namespace Generator3.Generation.Record
{
    public class PublicClassTemplate : Template<PublicClassModel>
    {
        public string Render(PublicClassModel model)
        {
            return $@"
using System;
using System.Runtime.InteropServices;

#nullable enable


namespace {model.NamespaceName}
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class {model.Name} : GLib.IHandle
    {{
        private readonly Internal.{model.Name}.Handle _handle;

        public Internal.{model.Name}.Handle Handle => !_handle.IsInvalid ? _handle : throw new Exception(""Invalid Handle"");
        IntPtr GLib.IHandle.Handle => _handle.DangerousGetHandle();

        // Override this to perform additional steps in the constructor
        partial void Initialize();

        public {model.Name}(IntPtr ptr) : this(new Internal.{model.Name}.Handle(ptr)){{ }}
        
        public {model.Name}(Internal.{model.Name}.Handle handle)
        {{
            _handle = handle;
            Initialize();
        }}
        
        // TODO: Default Constructor (allocate in managed memory and free on Dispose?)
        // We need to be able to create instances of records with full access to
        // fields, e.g. Gdk.Rectangle, Gtk.TreeIter, etc. 
        
        // TODO: Implement IDispose and free safe handle
    }}
}}";
        }
    }
}
