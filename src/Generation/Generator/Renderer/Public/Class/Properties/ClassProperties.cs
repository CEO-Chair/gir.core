using System;
using System.Linq;
using System.Text;
using Generator.Model;

namespace Generator.Renderer.Public;

public static partial class ClassProperties
{
    public static string Render(GirModel.Class cls)
    {
        return $@"
using System;
using GObject;
using System.Runtime.InteropServices;
#nullable enable
namespace {Namespace.GetPublicName(cls.Namespace)}
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class {cls.Name}
    {{
        {cls.Properties
            .Where(Property.IsEnabled)
            .Select(prop => Render(cls, prop))
            .Join(Environment.NewLine)}

        {cls.Implements.SelectMany(@interface => @interface.Properties
            .Where(Property.IsEnabled)
            .Select(prop => Render(@interface, prop)))
            .Join(Environment.NewLine)}
    }}
}}";
    }

    private static string Render(GirModel.ComplexType complexType, GirModel.Property property)
    {
        try
        {
            Property.ThrowIfNotSupported(complexType, property);

            var builder = new StringBuilder();
            builder.AppendLine(RenderDescriptor(complexType, property));
            builder.AppendLine(RenderAccessor(complexType, property));

            return builder.ToString();
        }
        catch (Exception ex)
        {
            var message = $"Did not generate property '{complexType.Name}.{property.Name}': {ex.Message}";

            if (ex is NotImplementedException)
                Log.Debug(message);
            else
                Log.Warning(message);

            return string.Empty;
        }
    }
}
