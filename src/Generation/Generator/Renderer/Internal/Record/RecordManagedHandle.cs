using Generator.Model;

namespace Generator.Renderer.Internal;

internal static class RecordManagedHandle
{
    public static string Render(GirModel.Record record)
    {
        var baseHandle = Record.GetInternalHandleName(record);
        var internalStructName = Record.GetInternalStructName(record);
        var name = Record.GetInternalManagedHandleName(record);
        return $@"
using System;
using System.Runtime.InteropServices;
using System.Runtime.Versioning;

#nullable enable

namespace { Namespace.GetInternalName(record.Namespace) }
{{
    // AUTOGENERATED FILE - DO NOT MODIFY

    {PlatformSupportAttribute.Render(record as GirModel.PlatformDependent)}
    public class { name } : {baseHandle}
    {{
        public static {baseHandle} Create({internalStructName}? data = null)
        {{
            var size = Marshal.SizeOf<{internalStructName}>();
            IntPtr ptr = Marshal.AllocHGlobal(size);
                
            if (data.HasValue)
            {{
                Marshal.StructureToPtr(data.Value, ptr, false);
            }}
            else
            {{
                var str = new {internalStructName}();
                Marshal.StructureToPtr(str, ptr, false);
            }}
                
            return new {name}(ptr);
        }}
            
        private {name}(IntPtr handle) : base(true) 
        {{
            SetHandle(handle); 
        }}
    
        protected override bool ReleaseHandle()
        {{
            Marshal.FreeHGlobal(handle);
            return true;
        }}
    }}
}}";
    }
}
