{{-
signal_name = 'On' + (signal.name | make_pascal_case)
signal_descriptor_name = (signal.name | make_pascal_case) + 'Signal'
signal_type = 'SignalArgs'

if !signal_type 
    debug name + ': Can not create signal ' + signal_name
    ret # Quit function because we can not create this signal
end

func get_obsolete
    if signal.deprecated
        text = ""
        if signal.doc_deprecated
            text = signal.doc_deprecated.text | make_single_line | escape_quotes
        end
        ret '[Obsolete("' + text + '")]'
    end
    ret ''
end
~}}

        {{~ if signal.parameters && signal.parameters.parameters ~}}
        /// <summary>
        /// Signal (Event) Arguments for {{signal_name}}
        /// </summary>
        public class {{(signal.name | make_pascal_case)}}SignalArgs : SignalArgs
        {
            
        }
        {{~ end ~}}

        /// <summary>
        /// Signal Descriptor for {{signal_name}}.
        /// </summary>
        {{~ get_obsolete ~}}
        public static readonly Signal<{{ signal_type }}> {{ signal_descriptor_name }}
            = Signal<{{ signal_type }}>.Wrap("{{ signal.name }}");
        
        {{~ if $1.doc && $1.doc.text ~}}
        /// <summary>
        {{~ $1.doc.text | comment_line_by_line_with_prefix '\t\t'~}}
        /// </summary>
        {{ end 
        get_obsolete -}}
        public event EventHandler<{{ signal_type }}> {{ signal_name }}
        {
            add => {{ signal_descriptor_name }}.Connect(this, value);
            remove => {{ signal_descriptor_name }}.Disconnect(this, value);
        }

