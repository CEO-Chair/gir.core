{{~
include 'helper.sbntxt'

$signal = $1
$class_name = $2 ?? ""

if !verify $signal.name ($class_name + ': Can not create signal')
    ret
end

$signal_name = 'On' + ($signal.name | make_pascal_case)
$signal_descriptor_name = ($signal.name | make_pascal_case) + 'Signal'
$signal_type = 'SignalArgs'

if $signal.needs_signal_args
    $signal_type = ($signal.name | make_pascal_case) + 'SignalArgs'
end

func write_type
    if $0.nullable
        ($0 | resolve_field) + '?'
    else
       ($0 | resolve_field)+''
    end
end

if $signal.needs_signal_args
    $signal_generic_args = $class_name + ', ' + $signal_type
else
    $signal_generic_args = $class_name
end
~}}
#region Signal {{$signal_name}}

{{~ if $signal.needs_signal_args ~}}
/// <summary>
/// Indexer to connect {{ $signal_descriptor_name }} with a SignalHandler&lt;{{$signal_generic_args}}&gt;
/// </summary>
public SignalHandler<{{ $signal_generic_args }}> this[Signal<{{ $signal_generic_args }}> signal]
{
    set => signal.Connect(this, value, true);
}

/// <summary>
/// Signal (Event) Arguments for {{$signal_name}}
/// </summary>
public sealed class {{$signal_type}} : SignalArgs
{
    #region Properties

    {{~
    index = 0
    for $param in $signal.parameters.parameters 
        index = index + 1
        get_summary($signal, '    ')
    ~}}
    public {{ $param | write_type }} {{ $param.name | fix_identifier | make_pascal_case }} => Args[{{index}}].Extract<{{ $param | write_type }}>();

    {{~ end ~}}
    #endregion
}

{{~ end ~}}
/// <summary>
/// Signal Descriptor for {{$signal_name}}.
/// </summary>
{{~ $signal | get_obsolete_attribute ~}}
public static readonly Signal<{{ $signal_generic_args }}> {{ $signal_descriptor_name }}
    = Signal<{{ $signal_generic_args }}>.Wrap("{{ $signal.name }}");

{{ include 'header.sbntxt' $signal 'without_own_doc' ~}}
public event SignalHandler<{{ $signal_generic_args }}> {{ $signal_name }}
{
    add => {{ $signal_descriptor_name }}.Connect(this, value);
    remove => {{ $signal_descriptor_name }}.Disconnect(this, value);
}

#endregion
