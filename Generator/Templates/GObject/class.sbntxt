{{-
func has_parent
    ret parent && (string.size parent) > 0
end 

func get_if_parent
    if has_parent
        ret $0 #': ' + parent
    end
    ret ''
end

func write_inheritance
    if has_parent
        implements_without_atk = array.insert_at implements_without_atk 0 parent
    end
    
    if (implements_without_atk | array.size) > 0
        ': ' + (array.join implements_without_atk ', ')
    else
        ''
    end
end

include 'helper.sbntxt'

-}}

using System;
using GObject;
using System.Runtime.InteropServices;

#nullable enable

namespace {{ namespace }}
{
    // AUTOGENERATED FILE - DO NOT MODIFY

    public partial class {{ name }} {{ write_inheritance }}
    {
{{~ if !fundamental ~}}
        private static readonly TypeDescriptor GTypeDescriptor = TypeDescriptor.For("{{ type_name }}", {{ name }}.Native.get_type);

        #region Signals
        {{~ if signals_have_event_args ~}}

        /// <summary>
        /// Indexer to connect with a SignalHandler&lt;{{name}}&gt;
        /// </summary>
        public SignalHandler<{{ name }}> this[Signal<{{ name }}> signal]
        {
            set => signal.Connect(this, value, true);
        }
        {{~ end ~}}
        {{~ for $signal in signals }}
        {{ include 'signal.sbntxt' $signal name }}
        {{ end ~}}

        #endregion

        {{~ if has_parent ~}} 
        #region Constructors

        protected internal {{ name }}(IntPtr ptr) : base(ptr) {}
        protected internal {{ name }}(params ConstructParameter[] properties) : base(properties) {}

        #endregion

        {{~ end ~}}
        
        #region Fields
                
        [StructLayout(LayoutKind.Sequential)]
        protected {{'new'|get_if_parent}} struct Fields : IObjectStruct
        {        
            {{ if (has_parent) && (name != "InitiallyUnowned") && (fields.size > 0)
                fields[0].type.name = string.append fields[0].type.name ".Fields" 
            end}}
            {{~ for $field in fields }}
            {{ include 'field.sbntxt' $field }}
            {{ end }}
        }                        
        #endregion
        
{{~ end ~}}
        #region Native

        protected static{{' new'|get_if_parent}} class Native
        {

            {{~if !fundamental && (string.size get_type_function) > 0 
                '            ' + (get_type_function | get_dll_import dll_import)
            ~}}
            public static extern ulong get_type();

            {{~ end ~}}
            #region Properties
            {{~ for $property in properties }}
            {{ include 'native_property.sbntxt' $property ~}}
            {{ end ~}}

            #endregion

            #region Methods
            {{~ for $method in all_methods }}
            {{ include 'method.sbntxt' $method dll_import name ~}}
            {{ end ~}}

            #endregion
        }

        #endregion
    }
}
