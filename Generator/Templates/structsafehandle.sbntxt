using System;
using System.Runtime.InteropServices;

#nullable enable

{{~ $safehandle_name = (get_metadata "RecordName") + "SafeHandle" ~}}

namespace {{ namespace.name }}
{
    // AUTOGENERATED FILE - DO NOT MODIFY
    public partial record {{get_metadata "RecordName"}}
    {
        public partial class Native
        {
            internal class {{$safehandle_name}} : SafeHandle
            {
                public static {{$safehandle_name}} Create()
                {
                    var size = Marshal.SizeOf<{{symbol_name}}>();
                    IntPtr ptr = Marshal.AllocHGlobal(size);
                    
                    return new {{$safehandle_name}}(ptr);
                }
                
                private {{$safehandle_name}}(IntPtr handle) : base(IntPtr.Zero, true)
                {
                    SetHandle(handle);
                }
    
                public sealed override bool IsInvalid => handle == IntPtr.Zero;
    
                protected sealed override bool ReleaseHandle()
                {
                    Marshal.FreeHGlobal(handle);
                    return true;
                }
            }
        }
    }
}