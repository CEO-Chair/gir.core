using System;
using System.Runtime.InteropServices;

#nullable enable

{{~ $safehandle_name = get_metadata "SafeHandleName" ~}}

namespace {{ namespace.name }}
{
    // AUTOGENERATED FILE - DO NOT MODIFY
    public partial class {{get_metadata "ClassName"}}
    {
        protected partial class Native
        {
            public class {{$safehandle_name}} : SafeHandle
            {
                protected {{$safehandle_name}}() : base(IntPtr.Zero, true) {}
                public {{$safehandle_name}}(IntPtr handle) : base(IntPtr.Zero, true)
                {
                    SetHandle(handle);
                }
    
                public sealed override bool IsInvalid => handle == IntPtr.Zero;
    
                protected override bool ReleaseHandle()
                {
                    {{write_release_memory_call}}
                    return true;
                }
            }
            
            {{~ if (constructors | array.size) == 0 ~}}
            
            public class Managed{{$safehandle_name}} : {{$safehandle_name}}
            {
                public static {{$safehandle_name}} Create()
                {
                    var size = Marshal.SizeOf<{{symbol_name}}>();
                    IntPtr ptr = Marshal.AllocHGlobal(size);
                    
                    return new {{$safehandle_name}}(ptr);
                }
                
                private Managed{{$safehandle_name}}(IntPtr handle) : base(handle) { }
    
                protected override bool ReleaseHandle()
                {
                    Marshal.FreeHGlobal(handle);
                    return true;
                }
            }
            {{~ end ~}}
        }
    }
}