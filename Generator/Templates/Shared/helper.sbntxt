{{~

func get_header(obj, with_own_doc=true)
    $ret = ""
    $ret = $ret + (obj | get_summary)
    
    if with_own_doc
        $ret = $ret + (obj | get_params)
        $ret = $ret + (obj | get_return)
    end
    
    $ret = $ret + (obj | get_obsolete_attribute)
    
    if ($ret | string.size == 0)
        $ret = "\r\n"
    end
    
    ret $ret
end

func verify(value, error)
    if (value | string.size == 0)
        debug error
        ret false
    else
        ret true
    end
end

func get_return(obj, prefix = "")
    $data = obj.return_value | get_metadata 
    ret prefix + "/// <returns>" + ($data | array.join "; ") + "</returns>\r\n"
end

func get_params(obj, prefix = "")
    $ret = ""
    
    if obj.parameters?.instance_parameter
        $ret = $ret + prefix + (obj.parameters.instance_parameter | get_param_text)
    end
    
    if obj.parameters?.parameters
        for $parameter in obj.parameters.parameters
            $ret = $ret + prefix + ($parameter | get_param_text)
        end
    end
    
    if(obj.throws)
        $ret = $ret + prefix + "/// <param name=\"error\">Pointer to an error or IntPtr.Zero</param>\r\n"
    end
    
    ret $ret
end

func get_param_text(parameter)
    $data = parameter | get_metadata 
    ret "/// <param name=\"" + parameter.name +"\">" + ($data | array.join "; ") + "</param>\r\n"
end

func get_summary(obj, prefix = "")
    $ret = ""
    if generate_comments && obj.doc?.text
        $ret = $ret + prefix + "/// <summary>\r\n"
        $ret = $ret + (obj.doc.text | comment_line_by_line_with_prefix prefix)
        $ret = $ret + prefix + "/// </summary>\r\n"
    end
    
    ret $ret
end

func get_obsolete_attribute(obj)
    $ret = ""
    
    if obj?.deprecated
        $text = ""
        if generate_comments && obj.doc_deprecated
            $text = obj.doc_deprecated.text | make_single_line | escape_quotes
        end
        $ret = '[Obsolete("' + $text + '")]\r\n'
    end
    
    ret $ret
end

func get_metadata(obj)
    $data = []
    
    if obj?.transfer_ownership
        $data = $data | array.add ("Transfer ownership: " + obj.transfer_ownership)
    end
    
    if obj?.nullable
        $data = $data | array.add ("Nullable: " + obj.nullable)
    end
    
    ret $data
end

func get_parameters(method)

    func to_string(parameter)
        ret (parameter | resolve_type) + " " + (parameter.name | fix_identifier)
    end

    $ps = []
    if method.parameters?.instance_parameter
        $ps = [ (method.parameters.instance_parameter | to_string)]
    end

    if method.parameters?.parameters
        for parameter in method.parameters.parameters
            $ps = array.add $ps (parameter | to_string)
        end 
    end
    
    $ret = array.join $ps ", "

    if method.throws
        if method.parameters
            $ret = $ret + ", "
        end
        $ret = $ret + "out IntPtr error"
    end
    
    ret $ret
end

func get_dll_import(entrypoint, dll_import)
    ret '[DllImport("' + dll_import + '", EntryPoint = "' + entrypoint + '")]\r\n'
end

func get_method(method, dll_import, prefix)
    if !verify dll_import (prefix + "Ignoring method because dll import is missing")
        ret ""
    else if !verify method?.identifier (prefix + "Ignoring method with name " + method?.name ?? "??" + " because it has no identifier")
        ret ""
    else if !verify method?.name (prefix + "Ignoring method with identifier " + method?.identifier ?? "??" + " because it has no name")
        ret ""
    end
    
    $ret = ""
    $ret = $ret + get_header(method)
    $ret = $ret + (get_dll_import method.identifier dll_import)
    $ret = $ret + 'public static extern ' + (method.return_value | resolve_type) + ' ' + (method.name | fix_identifier) + '(' + (method | get_parameters) + ');\r\n'

    ret $ret
end

func get_field(field)
    $ret = ""
    $ret = $ret + get_header(field)

    if field?.array?.fixed_size 
        for $x  in 1 .. (field.array.fixed_size | string.to_int)
            $ret = $ret + "public " + (field | resolve_field) + " " + ((field.name + $x) | fix_identifier) + ";\r\n"
        end
    else 
        $ret = $ret + "public " + (field | resolve_field) + " " + (field.name | fix_identifier) + ";\r\n"
    end
    
    ret $ret
end

func get_constant(constant)
    $type = constant.type | type_to_string
    $value = constant.value;

    if string.ends_with $type 'Flags'
        $value = '(' + $type + ')' + $value
    else if $type == 'string'
        $value = '"' + $value + '"'
    end

    $ret = ""
    $ret = $ret + get_header(constant)
    $ret = $ret + "public static " + $type + " " + (constant.name | fix_identifier) + " = " + $value + ";\r\n"

    ret $ret
end

func get_native_property(property)
    $property_name = (property.name | make_pascal_case)
    $property_descriptor_name = $property_name + 'Property'

    ret 'public const string ' + $property_descriptor_name + ' = "' + property.name + '";\r\n'
end
~}}